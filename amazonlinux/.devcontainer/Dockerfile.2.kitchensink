# Note: You can use any Debian/Ubuntu based image you want. 
FROM smankoo/devcon-amazonlinux:latest

# This Dockerfile adds a non-root user with sudo access. Use the "remoteUser"
# property in devcontainer.json to use it. On Linux, the container user's GID/UIDs
# will be updated to match your local UID/GID (when using the dockerFile property).
# See https://aka.ms/vscode-remote/containers/non-root-user for details.
ARG USERNAME=vscode
ARG USER_UID=1000
ARG USER_GID=$USER_UID

ARG ENABLE_NONROOT_DOCKER="true"
ARG SOURCE_SOCKET=/var/run/docker-host.sock
ARG TARGET_SOCKET=/var/run/docker.sock

ARG DOCKER_SCRIPT_SOURCE="https://raw.githubusercontent.com/smankoo/devcons/master/script-library/docker-redhat.sh"
ARG GIT_SCRIPT_SOURCE="https://raw.githubusercontent.com/smankoo/devcons/master/script-library/makegit-redhat.sh"
ARG terraform_SCRIPT_SOURCE="https://raw.githubusercontent.com/smankoo/devcons/master/script-library/terraform.sh"
ARG HOMEBREW_SCRIPT_SOURCE="https://raw.githubusercontent.com/smankoo/devcons/master/script-library/homebrew.sh"


RUN yum -y update \
    # Verify common dependencies and utilities are installed
    && yum -y install deltarpm \
    && yum -y install net-tools dialog git openssh-clients curl less procps tar sudo wget unzip zip python3 python3-venv python3-pip awscli 2>&1

RUN pip3 install pipenv 
    # Create a non-root user to use if not already available - see https://aka.ms/vscode-remote/containers/non-root-user.
RUN if [ $(getent passwd $USERNAME) ]; then \
        # If exists, see if we need to tweak the GID/UID
        if [ "$USER_GID" != "1000" ] || [ "$USER_UID" != "1000" ]; then \
            groupmod --gid $USER_GID $USERNAME \
            && usermod --uid $USER_UID --gid $USER_GID $USERNAME \
            && chown -R $USER_UID:$USER_GID /home/$USERNAME; \
        fi; \
    else \
        # Otherwise ccreate the non-root user
        groupadd --gid $USER_GID $USERNAME \
        && useradd -s /bin/bash --uid $USER_UID --gid $USER_GID -m $USERNAME \
        # Add sudo support for the non-root user
        && echo $USERNAME ALL=\(root\) NOPASSWD:ALL > /etc/sudoers.d/$USERNAME\
        && chmod 0440 /etc/sudoers.d/$USERNAME; \
    fi \
    && echo "export PS1=\"\[\e]0;\u@\h: \w\a\]\${debian_chroot:+(\$debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ \"" >> ~/.bashrc \
    && echo "export PS1=\"\[\e]0;\u@\h: \w\a\]\${debian_chroot:+(\$debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ \"" >> /home/${USERNAME}/.bashrc

RUN curl -sSL $DOCKER_SCRIPT_SOURCE -o /tmp/docker-setup.sh \
    && curl -sSL $GIT_SCRIPT_SOURCE -o /tmp/git-setup.sh \
    && curl -sSL $terraform_SCRIPT_SOURCE -o /tmp/terraform-setup.sh \
    && chmod 755 /tmp/*.sh \
    && /bin/bash /tmp/docker-setup.sh "${ENABLE_NONROOT_DOCKER}" "${SOURCE_SOCKET}" "${TARGET_SOCKET}" "${USERNAME}" \
    && /bin/bash /tmp/git-setup.sh \
    && /bin/bash /tmp/terraform-setup.sh \
    && rm /tmp/* \
    && echo "export PS1=\"\[\e]0;\u@\h: \w\a\]\${debian_chroot:+(\$debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ \"" >> /home/${USERNAME}/.bashrc \
    #
    # Clean up
    #
    && yum -y autoremove \
    && yum -y clean all \
    && rm -rf /var/cache/yum 
    
RUN curl -sSL $HOMEBREW_SCRIPT_SOURCE -o /tmp/homebrew-setup.sh && \
    chmod 755 /tmp/homebrew-setup.sh \
    su -c '/tmp/homebrew-setup.sh' - ${USERNAME}
# Setting the ENTRYPOINT to docker-init.sh will configure non-root access to 
# the Docker socket if "overrideCommand": false is set in devcontainer.json. 
# The script will also execute CMD if you need to alter startup behaviors.

RUN echo "export PS1=\"\[\e]0;\u@\h: \w\a\]\${debian_chroot:+(\$debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ \"" >> ~/.bashrc
ENTRYPOINT [ "/usr/local/share/docker-init.sh" ]
CMD [ "sleep", "infinity" ]